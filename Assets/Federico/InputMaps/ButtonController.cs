//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Federico/InputMaps/ButtonController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ButtonController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ButtonController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ButtonController"",
    ""maps"": [
        {
            ""name"": ""Left"",
            ""id"": ""37823874-a4d3-4a09-908f-ab05994a79da"",
            ""actions"": [
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""6b564f2b-eb33-482a-ba34-2e889919c04f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""1d69c7b0-382f-45fa-a3d6-75c6ef3ac99c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""a3c0a3d4-2d91-4377-8d8e-338f5e5ca9be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""9f4f9e21-24fd-4244-9654-3234c54417f0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Analog"",
                    ""type"": ""Value"",
                    ""id"": ""4102610b-7c83-4dc9-ae2d-14d2b73872aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ace0473c-79c0-45a9-8fbf-b00c86bf75c4"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb5fc787-980a-4374-8263-597cc94062ac"",
                    ""path"": ""<XRSimulatedController>{LeftHand}/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90121da1-139a-4c03-b38b-1ca7fc227cac"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cfca133-b466-40bd-911d-11239b187000"",
                    ""path"": ""<XRSimulatedController>{LeftHand}/secondaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83067850-1885-471e-a3ec-010c49c3e69c"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f90bfa0c-12e5-4fc4-8caf-de4ce1968e70"",
                    ""path"": ""<XRSimulatedController>{LeftHand}/gripButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec7fc736-2019-460a-98df-4f4c93e5a0ac"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20c39458-04d5-4ad4-809e-955f78c1053c"",
                    ""path"": ""<XRSimulatedController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""23e9223d-49ea-43b6-bcac-22ff98b164a3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b9b905aa-e2a9-458f-8c70-44cbef831f2c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""69f8f4f5-4694-482d-aaf6-14cc7eec15a2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d5cdda5e-cdec-496f-a7d3-524006a450c7"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""25a8a790-020d-4cab-a270-a0d92555f3ce"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""aac72893-53ec-4b9e-8b58-b52ed97870dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7e07ce30-6279-4a4a-b87f-946dda7ae7e0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aeddeff9-68f8-48d3-9a92-309b055ad59f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ac7b5142-60df-4e93-aded-346a2c1147c3"",
                    ""path"": ""<QuestTouchPlusController>/thumbstick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""217e75a1-615e-4942-84a9-7cb7f7f5490e"",
                    ""path"": ""<QuestProTouchController>/thumbstick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Analog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Right"",
            ""id"": ""15544389-e073-47bb-807b-cd03f9e03b87"",
            ""actions"": [
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""6bc738da-6cb3-48bb-99d2-6f2a6b717c7b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""f2f68b73-f42d-475f-bf7b-79c23fbed0f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f252ecda-a1c8-497e-8716-c06ac17c2b54"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3eca3682-fd0d-4ad0-ad4d-cf9a14a33907"",
                    ""path"": ""<XRSimulatedController>{RightHand}/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fae42001-0df3-4b06-9878-1721858e2f45"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1f6afdf-cc35-4302-8f3a-743bf22c34d6"",
                    ""path"": ""<XRSimulatedController>/secondaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""ca929aea-2830-41c9-900e-8b0a7e7094a6"",
            ""actions"": [
                {
                    ""name"": ""Keyboard"",
                    ""type"": ""Button"",
                    ""id"": ""b9a1cba0-d700-45c0-b865-ef23a34092de"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8e2950f-8f70-4603-b90c-b1b931ac3806"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Left
        m_Left = asset.FindActionMap("Left", throwIfNotFound: true);
        m_Left_X = m_Left.FindAction("X", throwIfNotFound: true);
        m_Left_Y = m_Left.FindAction("Y", throwIfNotFound: true);
        m_Left_Grip = m_Left.FindAction("Grip", throwIfNotFound: true);
        m_Left_Fire = m_Left.FindAction("Fire", throwIfNotFound: true);
        m_Left_Analog = m_Left.FindAction("Analog", throwIfNotFound: true);
        // Right
        m_Right = asset.FindActionMap("Right", throwIfNotFound: true);
        m_Right_B = m_Right.FindAction("B", throwIfNotFound: true);
        m_Right_A = m_Right.FindAction("A", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Keyboard = m_Keyboard.FindAction("Keyboard", throwIfNotFound: true);
    }

    ~@ButtonController()
    {
        UnityEngine.Debug.Assert(!m_Left.enabled, "This will cause a leak and performance issues, ButtonController.Left.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Right.enabled, "This will cause a leak and performance issues, ButtonController.Right.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard.enabled, "This will cause a leak and performance issues, ButtonController.Keyboard.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Left
    private readonly InputActionMap m_Left;
    private List<ILeftActions> m_LeftActionsCallbackInterfaces = new List<ILeftActions>();
    private readonly InputAction m_Left_X;
    private readonly InputAction m_Left_Y;
    private readonly InputAction m_Left_Grip;
    private readonly InputAction m_Left_Fire;
    private readonly InputAction m_Left_Analog;
    public struct LeftActions
    {
        private @ButtonController m_Wrapper;
        public LeftActions(@ButtonController wrapper) { m_Wrapper = wrapper; }
        public InputAction @X => m_Wrapper.m_Left_X;
        public InputAction @Y => m_Wrapper.m_Left_Y;
        public InputAction @Grip => m_Wrapper.m_Left_Grip;
        public InputAction @Fire => m_Wrapper.m_Left_Fire;
        public InputAction @Analog => m_Wrapper.m_Left_Analog;
        public InputActionMap Get() { return m_Wrapper.m_Left; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftActions set) { return set.Get(); }
        public void AddCallbacks(ILeftActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftActionsCallbackInterfaces.Add(instance);
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Analog.started += instance.OnAnalog;
            @Analog.performed += instance.OnAnalog;
            @Analog.canceled += instance.OnAnalog;
        }

        private void UnregisterCallbacks(ILeftActions instance)
        {
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Analog.started -= instance.OnAnalog;
            @Analog.performed -= instance.OnAnalog;
            @Analog.canceled -= instance.OnAnalog;
        }

        public void RemoveCallbacks(ILeftActions instance)
        {
            if (m_Wrapper.m_LeftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftActions @Left => new LeftActions(this);

    // Right
    private readonly InputActionMap m_Right;
    private List<IRightActions> m_RightActionsCallbackInterfaces = new List<IRightActions>();
    private readonly InputAction m_Right_B;
    private readonly InputAction m_Right_A;
    public struct RightActions
    {
        private @ButtonController m_Wrapper;
        public RightActions(@ButtonController wrapper) { m_Wrapper = wrapper; }
        public InputAction @B => m_Wrapper.m_Right_B;
        public InputAction @A => m_Wrapper.m_Right_A;
        public InputActionMap Get() { return m_Wrapper.m_Right; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightActions set) { return set.Get(); }
        public void AddCallbacks(IRightActions instance)
        {
            if (instance == null || m_Wrapper.m_RightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightActionsCallbackInterfaces.Add(instance);
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
        }

        private void UnregisterCallbacks(IRightActions instance)
        {
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
        }

        public void RemoveCallbacks(IRightActions instance)
        {
            if (m_Wrapper.m_RightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightActions instance)
        {
            foreach (var item in m_Wrapper.m_RightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightActions @Right => new RightActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_Keyboard;
    public struct KeyboardActions
    {
        private @ButtonController m_Wrapper;
        public KeyboardActions(@ButtonController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Keyboard => m_Wrapper.m_Keyboard_Keyboard;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @Keyboard.started += instance.OnKeyboard;
            @Keyboard.performed += instance.OnKeyboard;
            @Keyboard.canceled += instance.OnKeyboard;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @Keyboard.started -= instance.OnKeyboard;
            @Keyboard.performed -= instance.OnKeyboard;
            @Keyboard.canceled -= instance.OnKeyboard;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface ILeftActions
    {
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAnalog(InputAction.CallbackContext context);
    }
    public interface IRightActions
    {
        void OnB(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnKeyboard(InputAction.CallbackContext context);
    }
}
